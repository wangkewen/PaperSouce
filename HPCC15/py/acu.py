import numpy as np
#wc time
'''
# time 233.80, 220.69, 228.19, 196.35, 216.79.
real = [214,      17]
A_predict = [188    , 31 ]
B_predict = [213    , 13 ]
C_predict =[175    , 19 ]
D_predict=[205    , 10  ]
'''
#wc-io
'''
#real = [1058    , 968]
real = [0    , 968]
A_predict = [790    , 709]
B_predict = [795    , 736]
C_predict = [561,   265]
#D_predict = [625,345]
#D_predict = [615.01,460.75]
D_predict = [0,460.75]
'''
#lr-time
'''
# time  170.72, 164.68,  183.62, 164.97, 177.01.
real=[156.11 ,  1.53   ,  1.37   ,  1.32   ,  1.31   ,  1.31   ,  1.30   ,  1.24   ,  1.24   ,  1.24  ]
A_predict=[149.38 , 1.59   , 1.66   , 1.43   , 1.43   , 1.38   , 1.39   , 1.36   , 1.36   , 1.41  ]
B_predict=[169.95 , 1.33   , 1.34   , 1.38   , 1.25   , 1.21   , 1.20   , 1.29   , 1.15   , 1.12  ]
C_predict=[148.85 , 1.37   , 1.67   , 1.48   , 1.50   , 1.46   , 1.49   , 1.46   , 1.53   , 1.48  ]
D_predict=[164.49 , 0.96   , 1.14   , 1.23   , 1.24   , 1.15   , 1.04   , 1.12   , 1.06   , 1.02]
'''
# km-time
'''
# time 200.34,  222.85,  211.01, 207.84,  212.67.
real=[150.59 ,  0.97   ,  5.89   ,  1.11   ,  4.09   ,  0.68   ,  3.99   ,  0.41   ,  3.96   ,  0.35   ,  3.94   ,  0.32   ,  3.97   ,  0.30   ,  3.91   ,  0.28   ,  3.87   ,  0.27   ,  3.88   ,  0.27   ,  3.90   ,  0.28   ]
A_predict=[154.63 , 1.97   , 10.86  , 1.06   , 7.74   , 0.66   , 5.61   , 0.48   , 5.23   , 0.52   , 5.43   , 0.42   , 5.23   , 0.41   , 4.57   , 0.47   , 5.32   , 0.31   , 4.65   , 0.37   , 4.89   , 0.44    ]
B_predict=[157.45 , 1.73   , 7.64   , 0.77   , 4.74   , 0.72   , 4.16   , 0.49   , 4.07   , 0.61   , 4.50   , 0.37   , 4.34   , 0.40   , 4.23   , 0.35   , 4.13   , 0.34   , 3.92   , 0.31   , 3.90   , 0.33 ]
C_predict=[148.08 , 2.03   , 9.84   , 0.83   , 7.21   , 0.58   , 5.59   , 0.47   , 4.86   , 0.39   , 4.86   , 0.37   , 3.25   , 0.38   , 4.42   , 0.30   , 4.65   , 0.26   , 4.09   , 0.21   , 3.35   , 0.28   ]
D_predict=[160.75 , 1.18   , 5.98   , 0.45   , 5.18   , 0.29   , 4.15   , 0.21   , 4.17   , 0.21   , 4.80   , 0.23   , 4.83   , 0.19   , 4.14   , 0.17   , 4.58   , 0.15   , 4.50   , 0.18   , 4.66   , 0.14   ]
'''
# km-io
'''
#real=[0.00   ,  0.00   ,  5.11   ,  4.68   ,  3.95   ,  3.62   ,  3.39   ,  3.11   ,   2.51   ,  2.30   ,  1.71   ,  1.56   ,   1.24  ,  1.14   ,  0.91   ,  0.83   ,  0.66   ,  0.60   ,  0.67    ,  0.61   ,  0.66   ,  0.60   ,]
#real=[0.00   ,  0.00   ,  0   ,  4.68   ,  0  ,  3.62   ,  0   ,  3.11   ,   0   ,  2.30   ,  0  ,  1.56   ,   0  ,  1.14   ,  0  ,  0.83   ,  0  ,  0.60   , 0    ,  0.61   ,  0  ,  0.60   ,]
real=[0.00   ,  0.00   ,  5.11   ,  0   ,  3.95   ,  0   ,  3.39   , 0   ,   2.51   ,  0  ,  1.71   ,  0   ,   1.24  ,  0   ,  0.91   ,  0   ,  0.66   , 0   ,  0.67    ,  0  ,  0.66   ,  0]
A_predict=[0.00   , 0.00   ,  5.31    , 4.88   , 4.38    , 3.81   , 4.27   , 3.71   , 3.92   , 3.70   , 3.70   , 3.19   ,  3.32   , 2.97   , 3.10   , 2.86   ,  2.77   , 2.45   , 2.56   , 2.33   , 2.32   , 1.87  ] 
B_predict=[0.00   , 0.00   , 5.31   , 4.86   , 3.88   , 3.70   , 3.83   , 3.54   , 3.51   , 3.22   , 3.29   , 3.08   , 2.95   , 2.74   , 2.69   , 2.55   , 2.29   , 2.25   , 2.06   , 1.81   , 1.70   , 1.55   ]
C_predict=[0.00   , 0.00   , 5.02   , 2.44   , 5.20   , 2.50   , 4.84   , 2.27   , 4.67   , 2.30   , 4.38   , 2.03   , 4.16   , 2.07   , 3.92   , 1.89   , 3.72   , 1.85   , 3.56   , 1.53   , 3.53   , 1.78   , ]
#D_predict=[0.00   , 0.00   , 5.28   , 2.57   , 4.91    , 2.51   , 4.80    , 2.08   , 4.30   , 1.92   , 4.21   , 2.28   , 3.81   , 2.03   , 3.67   , 1.74   , 3.37   , 1.50   , 3.16  , 1.42   , 2.96   , 1.34 ]
#D_predict=[0.00   , 0.00   , 0.00   , 3.78   , 0.00   , 3.42   , 0.00   , 3.21   , 0.00   , 3.10   , 0.00   , 3.03   , 0.00   , 2.75   , 0.00   , 2.69   , 0.00   , 2.41   , 0.00   , 2.42   , 0.00   , 2.15   ]
D_predict=[0.00   , 0.00   , 5.20   , 0.00   , 4.81   , 0.00   , 4.68   , 0.00   , 4.22   , 0.00   , 4.06   , 0.00   , 3.73   , 0.00   , 3.55   , 0.00   , 3.26   , 0.00   , 3.06   , 0.00   , 2.86   , 0.00 ]
'''
# pr-time
'''
# time 230.85, 196.88, 209.25,  185.70, 161.75.
real=[75.61  ,  16.53  ,  14.29  ,  13.04  ,  12.81  ,  12.71  ,  12.23  ,  12.40  ,  12.46  ,  12.90  ,  12.10  ,  12.67  ,  8.99 ]
A_predict=[72.82  , 18.22  , 14.90  , 10.06  , 9.13   , 8.77   , 8.82   , 8.24   , 8.15   , 8.19   , 8.15   , 8.43   , 11.05 ]
B_predict=[96.31  , 15.63  , 12.74  , 8.21   , 8.72   , 8.10   , 8.50   , 8.40   , 8.03   , 7.93   , 7.90   , 7.92   , 8.49 ]
C_predict=[56.57  , 13.00  , 13.51  , 11.92  , 8.59   , 9.37   , 10.84  , 11.81  , 11.15  , 11.94  , 7.59   , 7.96   , 9.40  ]
D_predict=[58.58  , 12.37  , 10.91  , 8.83   , 7.75   , 8.02   , 6.54   , 7.99   , 7.24   , 7.63   , 6.63   , 6.83   , 10.22  ,]
'''
# pr-io-read
'''
real=[0      ,  746    ,  830    ,  674    ,  735    ,  735    ,  735    ,  735    ,  734    ,  733    ,  732    ,  732    ,  735]
A_predict=[0      , 741    , 814    , 637    , 673    , 669    , 670    , 665    , 663    , 661    , 660    , 657    , 653 ]
B_predict=[0      , 749    , 817    , 651    , 713    , 713    , 713    , 712    , 709    , 705    , 705    , 706    , 703  ]
C_predict=[0      , 397    , 439    , 339    , 312    , 295    , 288    , 281    , 270    , 278    , 255    , 254    , 249   ]
#D_predict=[0      , 416    , 441    , 345    , 343    , 334    , 316    , 327    , 321    , 303    , 301    , 311    , 309    ]
D_predict=[0.00   , 591.41 , 630.64 , 470.05 , 490.22 , 501.65 , 501.40 , 489.22 , 497.36 , 495.33 , 483.17 , 493.54 , 487.05]
'''
#pr-io-write

real=[817    ,  906    ,  740    ,  806    ,  807    ,  807    ,  807    ,  805    ,  804    ,  804    ,  803    ,  803    ,  0 ]
A_predict=[805    , 890    , 693    , 734    , 731    , 729    , 729    , 722    , 719    , 718    , 717    , 716    , 0  ]
B_predict=[816    , 894    , 711    , 776    , 778    , 776    , 777    , 774    , 772    , 769    , 771    , 770    , 0  ]
C_predict=[804    , 893    , 681    , 632    , 598    , 579    , 565    , 546    , 532    , 517    , 511    , 504    , 0    ]
#D_predict=[806    , 895    , 700    , 695    , 678    , 669    , 663    , 651    , 642    , 636    , 632    , 629    , 0   ]
D_predict=[789.32 , 849.82 , 633.48 , 660.80 , 660.96 , 674.79 , 673.58 , 655.19 , 666.83 , 665.31 , 650.03 , 663.74 , 0.00  ]

#pr-mem
'''
real = [28.4] 
A_predict = [29.2 ]
B_predict = [28.7 ]
C_predict = [31.4 ]
D_predict = [29.0 ]
'''
acu=[0]*4
sumr=np.sum(real)
print(sumr)
acr=0.0
for i in range(len(real)):
    if real[i] !=0:
        r=1.0*np.fabs(A_predict[i]-real[i])/sumr
    else: r=0
    acr+=r
acu[0]=100*(1-acr)
acr=0.0
for i in range(len(real)):
    if real[i] !=0:
        r=1.0*np.fabs(B_predict[i]-real[i])/sumr
    else: r=0
    acr+=r
acu[1]=100*(1-acr)
acr=0.0
for i in range(len(real)):
    if real[i] !=0:
        r=1.0*np.fabs(C_predict[i]-real[i])/sumr
    else: r=0
    acr+=r
acu[2]=100*(1-acr)
acr=0.0
for i in range(len(real)):
    if real[i] !=0:
        r=1.0*np.fabs(D_predict[i]-real[i])/sumr
    else: r=0
    acr+=r
acu[3]=100*(1-acr)

print("(%.1f, %.1f, %.1f, %.1f)" % (acu[0], acu[1], acu[2], acu[3]))


